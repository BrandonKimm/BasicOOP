객체지향프로그래밍의 개념
Objective Oriented Programing

1. 자바와 객체지향 선행지식
  1) 객체와 클래스의 명확한 구분
    사람은 객체인가? 클래스인가?
    김원빈은 객체인가? 클래스인가?
    카페는 객체인가? 클래스인가?
    이디야독산점은  객체인가? 클래스인가?
    ==> 사람은 몇살인가? 김원빈은 몇살인가? 
    ==> 카페는 몇년도에 오픈했지? 이디야독산점은 몇년도에 오픈했지?

    클래스는 분류 / 객체는 실체
    김원빈은 실체이기떄문에 28살 객체 / 사람은 분류이기때문에 몇살인지는 잘 모르겠다!  
    붕어빵틀은 클래스 붕어빵은 객체다! 그런 맹신은 그만하자!
    (물론 객체(Object) = 클래스들의 인스턴스 느낌으로는 일부 맞는 말) 
    * 클래스멤버 : 객체멤버 = 스태틱멤버 : 인스턴스멤버 = 정적멤버 : 동적멤버  
  
    1-1) 변수유형
      이름          / 다른이름                     / 할당메모리
      staic 변수    / 클래스멤버변수, 정적변수, 정적속성 / 스태틱영역
      instance 변수 / 객체멤버변수, 객체변수          / 힙 영역
      local 변수    / 지역변수                     / 스택영역(스택프레임내부)
      * 스태틱멤버들은 초기화 안해줘도 0 / 0.0 / null / false 초기화되어있고 지역변수들은 쓰레기값 
      * final static 인데 초기화 안되어있으면 컴파일조차 안되는 그런 같은 맥락
    
  2) 추상화 모델링 
    애플리케이션의 컨텍스트(경계)에 따라 클래스(분류)를 모델링한다는 느낌
    그러다가 공통적인건 클래스멤버로 빼고 인스턴스멤버로 넣을 거 넣고 그런 모델링 과정
    상속을 통한 추상화와 구체화, 인터페이스를 통한 추상화, 다형성을 통한 추상화 결국 캡상추다는 전부 interactional relation
    
  3) 상속 
    상속이라는건 재사용과 확장이라는 개념을 받아들여야된다. (inheritance 버리고 extends 받아들이기)
    상속 = 재사용 + 확장  ==> 부모클래스/자식클래스(X) : 상위클래스/하위클래스(O) 또는 슈퍼클래스/서브클래스(O) 
    조직도/계층도처럼 할아버지 아버지 할머니 어머니 처럼 그만 이해하고  
    동물이라는 상위클래스에 하위클래스로 포유류와 조류가 있고 포유류의 하위클래스로 고래와 박쥐 그리고 조류의 하위클래스로 참새와 팽귄이 있다는 포함관계로 받아들이기
    * 하위클래스는 상위클래스다 ==>  아버지는 할아버지다(X) / 포유류는 동물이다(O) 
    
    <Subclass is a SuperClass> : <남자 is a 사람 > : <하위클래스 is a 상위클래스> 
    틀린건 아니다 맞긴 맞는데 < 김원빈 is a 사람 > : <인스턴스 is a 클래스 > 이렇게 받아들일 수 도 있으니까 
    깔끔하게 <Subclass is a kind of SuperClass> : <남자 is kind of 사람> 아주 개운하군 == 남자는 사람의 한 분류다.
    
    -객체지향의 상속은 상위클래스의 특성을 재사용하는 것이다. (overriding)
    -객체지향의 상속은 상위클래스의 특성을 확장하는 것이다.   (extends)
    -객체지향의 상속은 is a kind of 관계를 만족해야 한다. (classify)
   
    -객체지향의 인터페이스는 be able to (Serializable, Cloneable, Comparable...)
     * 나중에 SOLID 에서 다시보자! ( LSP / ISP ) ==> 상위클래스의 특성은 최대한 다양하게 / 인터페이스는 구현을 강제할 메서드의 개수는 최대한 작게
    
    ==> 상속에서 하위클래스가 생성될 때 상위클래스도 힙에 같이 할당되는 내용과 상위클래스타입으로 하위클래스를 생성했을 때 묵시적형변환이 일어나는 과정들
        인터페이스가 왜 필요한지 알게 되는 이 맥락들 정확하게 인지하기! 


    
   
